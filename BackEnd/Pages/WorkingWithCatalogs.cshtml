@page
@model BackEnd.Pages.WorkingWithCatalogsModel

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .btn-show-popup {
        background-color: #0078D4;
        color: white;
        border: none;
        border-radius: 3px;
        padding: 5px;
        font-size: 12px;
        cursor: pointer;
    }

    .popup {
        position: absolute;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        padding: 10px;
        z-index: 1000;
        display: none;
    }

        .popup .btn {
            display: block;
            width: 100%;
            margin: 5px 0;
        }

    .tables {
        width: 700px;
        padding: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: auto;
    }

    .table-container {
        display: flex;
        flex-direction: column;
        gap: 2px;
        max-height: 300px;
        overflow-y: auto;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
        width: 100%;
        margin-bottom: 10px;
    }

    .table-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        transition: background-color 0.3s;
        cursor: pointer;
        width: 100%;
        position: relative;
    }

        .table-item:hover {
            background-color: #f1f1f1;
        }

    .table-icon {
        width: 30px;
        height: 30px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-weight: bold;
        margin-right: 10px;
        font-size: 16px;
        text-align: center;
        line-height: 30px;
        border-radius: 4px;
    }

    .table-name {
        font-size: 14px;
        color: #333;
        flex: 1;
    }

    .btn-back {
        display: inline-block;
        padding: 10px 20px;
        margin-top: 10px;
        background-color: #0078D4;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-back:hover {
            background-color: #005A9E;
        }

        .btn-back:focus {
            outline: none;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        z-index: 1000;
    }

    .side-panel {
        position: fixed;
        top: 0;
        right: 0;
        width: 0;
        height: 100%;
        background-color: #fff;
        box-shadow: -2px 0 5px rgba(0, 0, 0, 0.2);
        overflow-x: hidden;
        transition: 0.3s;
        z-index: 1100;
    }

    .side-panel-content {
        padding: 20px;
    }

    .side-panel .close-btn {
        position: absolute;
        top: 10px;
        right: 25px;
        font-size: 36px;
        cursor: pointer;
    }

    .side-panel .room-list {
        margin-top: 30px;
    }

    .side-panel .room-item {
        padding: 10px;
        cursor: pointer;
    }

        .side-panel .room-item:hover {
            background-color: #f0f0f0;
        }

    .side-panel-footer {
        position: absolute;
        bottom: 20px;
        left: 0;
        width: 100%;
        text-align: center;
    }

        .side-panel-footer button {
            margin: 5px;
        }
</style>

<div class="tables">
    <h4>DocSpace table</h4>
    <div class="table-container" id="roomsTable">
        @foreach (var room in RoomStore.RoomsList)
        {
            <div class="table-item" data-room-id="@room.Id">
                <div class="table-icon" style="background-color: @ColorHelper.GetColorForRoom(room.Name)">
                    @room.Name[0]
                </div>
                <span class="table-name">@room.Name</span>
            </div>
        }
    </div>
    <div class="table-container" id="subfolderdTable" style="display: none;"></div>
    <ul id="filesContainer" class="list-group"></ul>

    <button id="backToRoomsButton" class="btn-back" style="display: none;">Back to Rooms</button>
</div>

<div class="popup" id="popupMenu" style="display: none;">
    <button class="btn btn-primary" onclick="openSidePanel()">Move to</button>
    <div style="margin-top: 5px;"></div>
    <button class="btn btn-primary" onclick="openSidePanel()">Copy</button>
</div>

<div class="overlay" id="overlay"></div>

<div class="side-panel" id="sidePanel">
    <span class="close-btn" onclick="closeSidePanel()">&times;</span>
    <div class="side-panel-content">
        <h4>Select Room</h4>
        <div class="table-container" id="destTable">
        @foreach (var room in RoomStore.RoomsList)
        {
            <div class="table-item" data-room-id="@room.Id">
                <div class="table-icon" style="background-color: @ColorHelper.GetColorForRoom(room.Name)">
                    @room.Name[0]
                </div>
                <span class="table-name">@room.Name</span>
            </div>
        }
    </div>
        <div class="side-panel-footer">
            <button class="btn btn-primary" onclick="performAction()">Execute Action</button>
            <button class="btn btn-secondary" onclick="closeSidePanel()">Close</button>
        </div>
    </div>
</div>

<script>
    // Функция обработчика клика по элементу комнаты
    let destFolder;
    let currentFolder;
    function selectDestFolder (roomId){
        destFolder = roomId
    }

    async function handleRoomClick(roomId) {
        try {
            currentFolder = roomId
            const response = await fetch(`/WorkingWithCatalogs?handler=RoomInfo&roomId=${roomId}`);
            const result = await response.json();
            if (result.success) {
                const filesList = document.getElementById('filesContainer');
                const backToRoomsButton = document.getElementById('backToRoomsButton');
                if (filesList) {
                    filesList.innerHTML = '';

                    if (Array.isArray(result.files)) {
                        renderRoomTableItems(result.files);
                        backToRoomsButton.style.display = 'block';
                    } else {
                        console.error('result.files не является массивом');
                        filesList.innerHTML = '<li class="list-group-item">Error loading files</li>';
                    }
                } else {
                    console.error('filesContainer не найден в DOM');
                }
            } else {
                alert("Error updating file list.");
            }
        } catch (error) {
            console.error("Ошибка при запросе данных:", error);
            alert("Error linking room to customer.");
        }
    }

    // Функция рендеринга элементов таблицы файлов
    function renderRoomTableItems(files) {
        const tableContainer = document.getElementById('subfolderdTable');
        const roomsTable = document.getElementById('roomsTable');
        tableContainer.innerHTML = ''; // Очищаем контейнер перед заполнением

        if (!Array.isArray(files)) {
            console.error('files не является массивом или является пустым.');
            tableContainer.innerHTML = '<div>Error loading files</div>';
            return;
        }

        files.forEach(file => {
            // Проверяем наличие всех необходимых полей в файле
            if (!file || !file.icon || !file.name) {
                console.error('Некорректные данные файла:', file);
                return;
            }

            const tableItem = document.createElement('div');
            tableItem.className = 'table-item';

            // Создаем кнопку для показа меню
            const showPopupButton = document.createElement('button');
            showPopupButton.className = 'btn-show-popup';
            showPopupButton.textContent = '...'; // Символ для кнопки
            showPopupButton.onclick = (event) => {
                event.stopPropagation(); // Останавливаем распространение события клика
                showPopupMenu(event, file);
            };

            const tableIcon = document.createElement('div');
            tableIcon.className = 'table-icon';
            tableIcon.style.fontSize = '12px';

            // Установка иконки файла
            tableIcon.innerHTML = file.icon || ''; // Используем пустую строку как запасной вариант

            const tableName = document.createElement('span');
            tableName.className = 'table-name';
            tableName.textContent = file.name || 'Unknown'; // Используем 'Unknown', если имя не задано

            // Устанавливаем атрибут onclick для открытия ссылки в новой вкладке
            if (file.webUrl) {
                tableItem.onclick = function () {
                    window.open(file.webUrl, '_blank'); // Открываем ссылку в новой вкладке
                };
            }

            // Добавляем элементы в правильном порядке
            tableItem.appendChild(tableIcon);
            tableItem.appendChild(tableName);
            tableItem.appendChild(showPopupButton); // Кнопка идет последней

            tableContainer.appendChild(tableItem);
        });

        tableContainer.style.display = 'block';
        roomsTable.style.display = 'none';
    }

    // Привязка обработчиков событий после загрузки страницы
    document.addEventListener('DOMContentLoaded', () => {
        // Привязка обработчиков для элементов таблицы
        document.querySelectorAll('.table-item').forEach(item => {
            item.addEventListener('click', function () {
                const roomId = this.dataset.roomId;
                handleRoomClick(roomId);
            });
        });
        document.addEventListener('DOMContentLoaded', () => {
            // Привязка обработчиков для элементов таблицы
            document.querySelectorAll('destTable').forEach(item => {
                item.addEventListener('click', function () {
                    const roomId = this.dataset.roomId;
                    selectDestFolder(roomId);
                });
            });

        // Обработчик кнопки "Назад к списку комнат"
        document.getElementById('backToRoomsButton').addEventListener('click', function () {
            const roomsTable = document.getElementById('roomsTable');
            const subfolderdTable = document.getElementById('subfolderdTable');
            roomsTable.style.display = 'flex';
            subfolderdTable.style.display = 'none';
            this.style.display = 'none';
        });
    });

    // Прочие функции для работы с модальными окнами и панелями
    function openSidePanel() {
        document.getElementById('sidePanel').style.width = '480px'; // Увеличенная ширина
        document.getElementById('overlay').style.display = 'block';

        // Пример получения данных комнат, замените на фактический запрос
        fetch('/WorkingWithCatalogs?handler=GetRooms')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderRoomList(data.rooms); // Отображаем список комнат
                } else {
                    console.error('Ошибка при загрузке списка комнат');
                }
            })
            .catch(error => {
                console.error('Ошибка запроса:', error);
            });
    }

    function closeSidePanel() {
        document.getElementById('sidePanel').style.width = '0';
        document.getElementById('overlay').style.display = 'none';
    }

    function performAction() {
        console.log(currentFolder)
        console.log(destFolder)
    }

    // Функция для отображения меню
    function showPopupMenu(event, file) {
        const popupMenu = document.getElementById('popupMenu');
        popupMenu.style.display = 'block';
        popupMenu.style.left = `${event.clientX}px`;
        popupMenu.style.top = `${event.clientY}px`;

        // Скрыть меню при клике вне его области
        document.addEventListener('click', handleDocumentClick);
        popupMenu.addEventListener('click', (event) => event.stopPropagation());
    }

    // Обработчик клика вне области меню
    function handleDocumentClick(event) {
        const popupMenu = document.getElementById('popupMenu');
        if (!popupMenu.contains(event.target)) {
            popupMenu.style.display = 'none';
            document.removeEventListener('click', handleDocumentClick);
        }
    }

    // Функция рендеринга списка комнат в боковой панели
    function renderRoomList(rooms) {
        const roomList = document.getElementById('roomList');
        roomList.innerHTML = ''; // Очищаем список перед добавлением новых элементов

        if (!Array.isArray(rooms)) {
            console.error('rooms не является массивом или является пустым.');
            roomList.innerHTML = '<div>Error loading rooms</div>';
            return;
        }

        rooms.forEach(room => {
            if (!room || !room.name) {
                console.error('Некорректные данные комнаты:', room);
                return;
            }

            const roomItem = document.createElement('div');
            roomItem.className = 'room-item';
            roomItem.textContent = room.name;
            roomItem.onclick = () => {
                console.log('Room clicked:', room.name);
                // Дополнительные действия при клике на комнату
            };

            roomList.appendChild(roomItem);
        });
    }
</script>
